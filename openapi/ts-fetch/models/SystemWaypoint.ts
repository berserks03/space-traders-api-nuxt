/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WaypointOrbital } from './WaypointOrbital';
import {
    WaypointOrbitalFromJSON,
    WaypointOrbitalFromJSONTyped,
    WaypointOrbitalToJSON,
    WaypointOrbitalToJSONTyped,
} from './WaypointOrbital';
import type { WaypointType } from './WaypointType';
import {
    WaypointTypeFromJSON,
    WaypointTypeFromJSONTyped,
    WaypointTypeToJSON,
    WaypointTypeToJSONTyped,
} from './WaypointType';

/**
 * 
 * @export
 * @interface SystemWaypoint
 */
export interface SystemWaypoint {
    /**
     * The symbol of the waypoint.
     * @type {string}
     * @memberof SystemWaypoint
     */
    symbol: string;
    /**
     * 
     * @type {WaypointType}
     * @memberof SystemWaypoint
     */
    type: WaypointType;
    /**
     * Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
     * @type {number}
     * @memberof SystemWaypoint
     */
    x: number;
    /**
     * Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
     * @type {number}
     * @memberof SystemWaypoint
     */
    y: number;
    /**
     * Waypoints that orbit this waypoint.
     * @type {Array<WaypointOrbital>}
     * @memberof SystemWaypoint
     */
    orbitals: Array<WaypointOrbital>;
    /**
     * The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
     * @type {string}
     * @memberof SystemWaypoint
     */
    orbits?: string;
}



/**
 * Check if a given object implements the SystemWaypoint interface.
 */
export function instanceOfSystemWaypoint(value: object): value is SystemWaypoint {
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('y' in value) || value['y'] === undefined) return false;
    if (!('orbitals' in value) || value['orbitals'] === undefined) return false;
    return true;
}

export function SystemWaypointFromJSON(json: any): SystemWaypoint {
    return SystemWaypointFromJSONTyped(json, false);
}

export function SystemWaypointFromJSONTyped(json: any, ignoreDiscriminator: boolean): SystemWaypoint {
    if (json == null) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'type': WaypointTypeFromJSON(json['type']),
        'x': json['x'],
        'y': json['y'],
        'orbitals': ((json['orbitals'] as Array<any>).map(WaypointOrbitalFromJSON)),
        'orbits': json['orbits'] == null ? undefined : json['orbits'],
    };
}

export function SystemWaypointToJSON(json: any): SystemWaypoint {
    return SystemWaypointToJSONTyped(json, false);
}

export function SystemWaypointToJSONTyped(value?: SystemWaypoint | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'symbol': value['symbol'],
        'type': WaypointTypeToJSON(value['type']),
        'x': value['x'],
        'y': value['y'],
        'orbitals': ((value['orbitals'] as Array<any>).map(WaypointOrbitalToJSON)),
        'orbits': value['orbits'],
    };
}

