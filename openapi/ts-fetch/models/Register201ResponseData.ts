/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Agent } from './Agent';
import {
    AgentFromJSON,
    AgentFromJSONTyped,
    AgentToJSON,
    AgentToJSONTyped,
} from './Agent';
import type { Ship } from './Ship';
import {
    ShipFromJSON,
    ShipFromJSONTyped,
    ShipToJSON,
    ShipToJSONTyped,
} from './Ship';
import type { Contract } from './Contract';
import {
    ContractFromJSON,
    ContractFromJSONTyped,
    ContractToJSON,
    ContractToJSONTyped,
} from './Contract';
import type { Faction } from './Faction';
import {
    FactionFromJSON,
    FactionFromJSONTyped,
    FactionToJSON,
    FactionToJSONTyped,
} from './Faction';

/**
 * 
 * @export
 * @interface Register201ResponseData
 */
export interface Register201ResponseData {
    /**
     * 
     * @type {Agent}
     * @memberof Register201ResponseData
     */
    agent: Agent;
    /**
     * 
     * @type {Contract}
     * @memberof Register201ResponseData
     */
    contract: Contract;
    /**
     * 
     * @type {Faction}
     * @memberof Register201ResponseData
     */
    faction: Faction;
    /**
     * 
     * @type {Ship}
     * @memberof Register201ResponseData
     */
    ship: Ship;
    /**
     * A Bearer token for accessing secured API endpoints.
     * @type {string}
     * @memberof Register201ResponseData
     */
    token: string;
}

/**
 * Check if a given object implements the Register201ResponseData interface.
 */
export function instanceOfRegister201ResponseData(value: object): value is Register201ResponseData {
    if (!('agent' in value) || value['agent'] === undefined) return false;
    if (!('contract' in value) || value['contract'] === undefined) return false;
    if (!('faction' in value) || value['faction'] === undefined) return false;
    if (!('ship' in value) || value['ship'] === undefined) return false;
    if (!('token' in value) || value['token'] === undefined) return false;
    return true;
}

export function Register201ResponseDataFromJSON(json: any): Register201ResponseData {
    return Register201ResponseDataFromJSONTyped(json, false);
}

export function Register201ResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): Register201ResponseData {
    if (json == null) {
        return json;
    }
    return {
        
        'agent': AgentFromJSON(json['agent']),
        'contract': ContractFromJSON(json['contract']),
        'faction': FactionFromJSON(json['faction']),
        'ship': ShipFromJSON(json['ship']),
        'token': json['token'],
    };
}

export function Register201ResponseDataToJSON(json: any): Register201ResponseData {
    return Register201ResponseDataToJSONTyped(json, false);
}

export function Register201ResponseDataToJSONTyped(value?: Register201ResponseData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'agent': AgentToJSON(value['agent']),
        'contract': ContractToJSON(value['contract']),
        'faction': FactionToJSON(value['faction']),
        'ship': ShipToJSON(value['ship']),
        'token': value['token'],
    };
}

