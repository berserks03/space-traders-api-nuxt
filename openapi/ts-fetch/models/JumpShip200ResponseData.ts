/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Agent } from './Agent';
import {
    AgentFromJSON,
    AgentFromJSONTyped,
    AgentToJSON,
    AgentToJSONTyped,
} from './Agent';
import type { MarketTransaction } from './MarketTransaction';
import {
    MarketTransactionFromJSON,
    MarketTransactionFromJSONTyped,
    MarketTransactionToJSON,
    MarketTransactionToJSONTyped,
} from './MarketTransaction';
import type { Cooldown } from './Cooldown';
import {
    CooldownFromJSON,
    CooldownFromJSONTyped,
    CooldownToJSON,
    CooldownToJSONTyped,
} from './Cooldown';
import type { ShipNav } from './ShipNav';
import {
    ShipNavFromJSON,
    ShipNavFromJSONTyped,
    ShipNavToJSON,
    ShipNavToJSONTyped,
} from './ShipNav';

/**
 * 
 * @export
 * @interface JumpShip200ResponseData
 */
export interface JumpShip200ResponseData {
    /**
     * 
     * @type {ShipNav}
     * @memberof JumpShip200ResponseData
     */
    nav: ShipNav;
    /**
     * 
     * @type {Cooldown}
     * @memberof JumpShip200ResponseData
     */
    cooldown: Cooldown;
    /**
     * 
     * @type {MarketTransaction}
     * @memberof JumpShip200ResponseData
     */
    transaction: MarketTransaction;
    /**
     * 
     * @type {Agent}
     * @memberof JumpShip200ResponseData
     */
    agent: Agent;
}

/**
 * Check if a given object implements the JumpShip200ResponseData interface.
 */
export function instanceOfJumpShip200ResponseData(value: object): value is JumpShip200ResponseData {
    if (!('nav' in value) || value['nav'] === undefined) return false;
    if (!('cooldown' in value) || value['cooldown'] === undefined) return false;
    if (!('transaction' in value) || value['transaction'] === undefined) return false;
    if (!('agent' in value) || value['agent'] === undefined) return false;
    return true;
}

export function JumpShip200ResponseDataFromJSON(json: any): JumpShip200ResponseData {
    return JumpShip200ResponseDataFromJSONTyped(json, false);
}

export function JumpShip200ResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): JumpShip200ResponseData {
    if (json == null) {
        return json;
    }
    return {
        
        'nav': ShipNavFromJSON(json['nav']),
        'cooldown': CooldownFromJSON(json['cooldown']),
        'transaction': MarketTransactionFromJSON(json['transaction']),
        'agent': AgentFromJSON(json['agent']),
    };
}

export function JumpShip200ResponseDataToJSON(json: any): JumpShip200ResponseData {
    return JumpShip200ResponseDataToJSONTyped(json, false);
}

export function JumpShip200ResponseDataToJSONTyped(value?: JumpShip200ResponseData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nav': ShipNavToJSON(value['nav']),
        'cooldown': CooldownToJSON(value['cooldown']),
        'transaction': MarketTransactionToJSON(value['transaction']),
        'agent': AgentToJSON(value['agent']),
    };
}

